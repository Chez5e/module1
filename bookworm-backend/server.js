// server.js

require('dotenv').config();

const express = require('express');
const cors = require('cors');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ë–î
const sequelize = require('./config/database.js');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥–µ–ª—å User
const User = require('./models/user.js');

const app = express();

app.use(cors());
app.use(express.json());

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.send('‚úÖ Bookworm backend —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// –ú–∞—Ä—à—Ä—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
app.post('/register', async (req, res) => {
  const { fullName, phone, email, login, password } = req.body;

  if (!fullName || !phone || !email || !login || !password) {
    return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    const existingUser = await User.findOne({ where: { login } });
    if (existingUser) {
      return res.status(409).json({ message: '–õ–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç' });
    }

    const newUser = await User.create({ fullName, phone, email, login, password });
    res.status(201).json({ message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞', user: newUser });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3002;
sequelize.sync()
  .then(() => {
    app.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`));
  })
  .catch(err => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ë–î:', err);
  });
